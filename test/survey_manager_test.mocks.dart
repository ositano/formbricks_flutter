// Mocks generated by Mockito 5.4.6 from annotations
// in formbricks_flutter/test/survey_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:formbricks_flutter/src/api/formbricks_client.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FormbricksClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormbricksClient extends _i1.Mock implements _i2.FormbricksClient {
  MockFormbricksClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiHost =>
      (super.noSuchMethod(
            Invocation.getter(#apiHost),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#apiHost),
            ),
          )
          as String);

  @override
  String get environmentId =>
      (super.noSuchMethod(
            Invocation.getter(#environmentId),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#environmentId),
            ),
          )
          as String);

  @override
  String get apiKey =>
      (super.noSuchMethod(
            Invocation.getter(#apiKey),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#apiKey),
            ),
          )
          as String);

  @override
  bool get isDev =>
      (super.noSuchMethod(Invocation.getter(#isDev), returnValue: false)
          as bool);

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  _i4.Future<void> setUser(
    String? userId, {
    Map<String, dynamic>? attributes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setUser, [userId], {#attributes: attributes}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getSurveys() =>
      (super.noSuchMethod(
            Invocation.method(#getSurveys, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<String> createDisplay({
    required String? surveyId,
    required String? userId,
    String? responseId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createDisplay, [], {
              #surveyId: surveyId,
              #userId: userId,
              #responseId: responseId,
            }),
            returnValue: _i4.Future<String>.value(
              _i3.dummyValue<String>(
                this,
                Invocation.method(#createDisplay, [], {
                  #surveyId: surveyId,
                  #userId: userId,
                  #responseId: responseId,
                }),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<void> submitResponse({
    required String? surveyId,
    required String? userId,
    required Map<String, dynamic>? data,
    bool? finished = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#submitResponse, [], {
              #surveyId: surveyId,
              #userId: userId,
              #data: data,
              #finished: finished,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String> uploadFile({
    required String? name,
    required String? mime,
    required String? filePath,
    String? surveyId,
    List<String>? allowedFileExtensions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadFile, [], {
              #name: name,
              #mime: mime,
              #filePath: filePath,
              #surveyId: surveyId,
              #allowedFileExtensions: allowedFileExtensions,
            }),
            returnValue: _i4.Future<String>.value(
              _i3.dummyValue<String>(
                this,
                Invocation.method(#uploadFile, [], {
                  #name: name,
                  #mime: mime,
                  #filePath: filePath,
                  #surveyId: surveyId,
                  #allowedFileExtensions: allowedFileExtensions,
                }),
              ),
            ),
          )
          as _i4.Future<String>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i5.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);

  @override
  _i4.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
